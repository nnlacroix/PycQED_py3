# CC_BACKEND_VERSION 0.2.4
# OPENQL_VERSION 0.8.0
# Program: 'CW_RO_sequence'
# Note:    generated by OpenQL Central Controller backend
#
# synchronous start and latency compensation
                add             R63,1,R0                # R63 externally set by user, prevent 0 value which would wrap counter
                seq_bar         20                      # synchronization
syncLoop:       seq_out         0x00000000,1            # 20 ns delay
                loop            R0,@syncLoop            #
mainLoop:                                               #
### Kernel: 'k_main'
## Bundle 0: start_cycle=1, duration_in_cycles=300:
 # READOUT: measure(q0)
  # slot=1, instrument='ro_1', group=0': signal='[dummy]'
 # last bundle of kernel, will pad outputs to match durations
  # slot=1, instrument='ro_1': lastStartCycle=0, start_cycle=1, slotDurationInCycles=300
[1]             seq_out         0x00000000,301          # cycle 0-301: padding on 'ro_2'
[2]             seq_out         0x00000000,301          # cycle 0-301: padding on 'mw_0'
# comment
[3]             seq_out         0x00000000,2            # 00000000000000000000000000000000
[3]             seq_out         0x80003E00,2            # 10000000000000000000000000000000
[3]             seq_out         0x80003C01,2            # 10000000000000000000001000000001
[3]             seq_out         0x80003A02,2            # 10000000000000000000010000000010
[3]             seq_out         0x80003803,2            # 10000000000000000000011000000011
[3]             seq_out         0x80003604,2            # 10000000000000000000100000000100
[3]             seq_out         0x80003405,2            # 10000000000000000000101000000101
[3]             seq_out         0x80003206,2            # 10000000000000000000110000000110
[3]             seq_out         0x80003007,2            # 10000000000000000000111000000111
[3]             seq_out         0x80002E08,2            # 10000000000000000001000000001000
[3]             seq_out         0x80002C09,2            # 10000000000000000001001000001001
[3]             seq_out         0x80002A0A,2            # 10000000000000000001010000001010
[3]             seq_out         0x8000280B,2            # 10000000000000000001011000001011
[3]             seq_out         0x8000260C,2            # 10000000000000000001100000001100
[3]             seq_out         0x8000240D,2            # 10000000000000000001101000001101
[3]             seq_out         0x8000220E,2            # 10000000000000000001110000001110
[3]             seq_out         0x8000200F,2            # 10000000000000000001111000001111
[3]             seq_out         0x80001E10,2            # 10000000000000000010000000010000
[3]             seq_out         0x80001C11,2            # 10000000000000000010001000010001
[3]             seq_out         0x80001A12,2            # 10000000000000000010010000010010
[3]             seq_out         0x80001813,2            # 10000000000000000010011000010011
[3]             seq_out         0x80001614,2            # 10000000000000000010100000010100
[3]             seq_out         0x80001415,2            # 10000000000000000010101000010101
[3]             seq_out         0x80001216,2            # 10000000000000000010110000010110
[3]             seq_out         0x80001017,2            # 10000000000000000010111000010111
[3]             seq_out         0x80000E18,2            # 10000000000000000011000000011000
[3]             seq_out         0x80000C19,2            # 10000000000000000011001000011001
[3]             seq_out         0x80000A1A,2            # 10000000000000000011010000011010
[3]             seq_out         0x8000081B,2            # 10000000000000000011011000011011
[3]             seq_out         0x8000061C,2            # 10000000000000000011100000011100
[3]             seq_out         0x8000041D,2            # 10000000000000000011101000011101
[3]             seq_out         0x8000021E,2            # 10000000000000000011110000011110
[3]             seq_out         0x8000001F,2            # 10000000000000000011111000011111
[3]             seq_out         0x00000000,18           # 00000000000000000000000000000000
# digIn=2
[4]             seq_out         0x00000000,301          # cycle 0-301: padding on 'mw_1'
[6]             seq_out         0x00000000,301          # cycle 0-301: padding on 'flux_0'

                jmp             @mainLoop               # loop indefinitely
